// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(NoratorContext))]
    [Migration("20230419112151_DeleteErrorTable")]
    partial class DeleteErrorTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1983, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jonah Hill"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1963, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Johnny Depp"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1992, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Freddie Highmore"
                        });
                });

            modelBuilder.Entity("Core.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfSubscribers")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContentCategoryId");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentCategoryId = 1,
                            Name = "Don`t Look Up",
                            NumberOfSubscribers = 1,
                            ReleaseDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ContentCategoryId = 1,
                            Name = "Charlie and the Chocolate Factory",
                            NumberOfSubscribers = 0,
                            ReleaseDate = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Entities.Content_Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentActors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            ContentId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            ContentId = 2
                        },
                        new
                        {
                            ActorId = 3,
                            ContentId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Content_Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentGenres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            ContentId = 1
                        },
                        new
                        {
                            GenreId = 2,
                            ContentId = 1
                        },
                        new
                        {
                            GenreId = 3,
                            ContentId = 1
                        },
                        new
                        {
                            GenreId = 1,
                            ContentId = 2
                        },
                        new
                        {
                            GenreId = 4,
                            ContentId = 2
                        },
                        new
                        {
                            GenreId = 5,
                            ContentId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.ContentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("ContentCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Film"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Series"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cartoon"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Game"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Book"
                        });
                });

            modelBuilder.Entity("Core.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Family"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NickName = "Admin",
                            Password = "123Admin#",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2012, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NickName = "Tarakan",
                            Password = "123Tarakan#",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.User_Content", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("UserContents");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            ContentId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Content", b =>
                {
                    b.HasOne("Core.Entities.ContentCategory", "ContentCategory")
                        .WithMany("Contents")
                        .HasForeignKey("ContentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentCategory");
                });

            modelBuilder.Entity("Core.Entities.Content_Actor", b =>
                {
                    b.HasOne("Core.Entities.Actor", "Actor")
                        .WithMany("Content_Actors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Content", "Content")
                        .WithMany("Content_Actors")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Core.Entities.Content_Genre", b =>
                {
                    b.HasOne("Core.Entities.Content", "Content")
                        .WithMany("Content_Genres")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Genre", "Genre")
                        .WithMany("Content_Genres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Core.Entities.User_Content", b =>
                {
                    b.HasOne("Core.Entities.Content", "Content")
                        .WithMany("User_Contents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("User_Contents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Actor", b =>
                {
                    b.Navigation("Content_Actors");
                });

            modelBuilder.Entity("Core.Entities.Content", b =>
                {
                    b.Navigation("Content_Actors");

                    b.Navigation("Content_Genres");

                    b.Navigation("User_Contents");
                });

            modelBuilder.Entity("Core.Entities.ContentCategory", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Core.Entities.Genre", b =>
                {
                    b.Navigation("Content_Genres");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("User_Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
